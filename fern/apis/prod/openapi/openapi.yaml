openapi: 3.0.2
info:
  title: Superagent
  description: ðŸ¥· Run AI-agents with an API
  version: 0.2.39
servers:
  - url: https://api.beta.superagent.sh
paths:
  /api/v1/agents:
    get:
      tags:
        - Agent
      summary: List
      description: List all agents
      operationId: list_api_v1_agents_get
      parameters:
        - required: false
          schema:
            title: Skip
            type: integer
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            title: Take
            type: integer
            default: 50
          name: take
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentList'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    post:
      tags:
        - Agent
      summary: Create
      description: Create a new agent
      operationId: create_api_v1_agents_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__Agent'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Agent'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/agents/{agent_id}:
    get:
      tags:
        - Agent
      summary: Get
      description: Get a single agent
      operationId: get_api_v1_agents__agent_id__get
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Agent'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    delete:
      tags:
        - Agent
      summary: Delete
      description: Delete an agent
      operationId: delete_api_v1_agents__agent_id__delete
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    patch:
      tags:
        - Agent
      summary: Update
      description: Patch an agent
      operationId: update_api_v1_agents__agent_id__patch
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Agent'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/agents/{agent_id}/invoke:
    post:
      tags:
        - Agent
      summary: Invoke
      description: Invoke an agent
      operationId: invoke_api_v1_agents__agent_id__invoke_post
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__AgentInvoke'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__AgentInvoke'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
      x-fern-sdk-method-name: invoke
      x-fern-sdk-group-name: agent
  /api/v1/agents/{agent_id}/llms:
    post:
      tags:
        - Agent
      summary: Add Llm
      description: Add LLM to agent
      operationId: add_llm_api_v1_agents__agent_id__llms_post
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__AgentLLM'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Agent'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/agents/{agent_id}/llms/{llm_id}:
    delete:
      tags:
        - Agent
      summary: Remove Llm
      description: Remove LLM from agent
      operationId: remove_llm_api_v1_agents__agent_id__llms__llm_id__delete
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
        - required: true
          schema:
            title: Llm Id
            type: string
          name: llm_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/agents/{agent_id}/tools:
    get:
      tags:
        - Agent
      summary: List Tools
      description: List agent tools
      operationId: list_tools_api_v1_agents__agent_id__tools_get
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentToolList'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    post:
      tags:
        - Agent
      summary: Add Tool
      description: Add tool to agent
      operationId: add_tool_api_v1_agents__agent_id__tools_post
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__AgentTool'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Agent'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/agents/{agent_id}/tools/{tool_id}:
    delete:
      tags:
        - Agent
      summary: Remove Tool
      description: Remove tool from agent
      operationId: remove_tool_api_v1_agents__agent_id__tools__tool_id__delete
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
        - required: true
          schema:
            title: Tool Id
            type: string
          name: tool_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/agents/{agent_id}/datasources:
    get:
      tags:
        - Agent
      summary: List Datasources
      description: List agent datasources
      operationId: list_datasources_api_v1_agents__agent_id__datasources_get
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDatasosurceList'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    post:
      tags:
        - Agent
      summary: Add Datasource
      description: Add datasource to agent
      operationId: add_datasource_api_v1_agents__agent_id__datasources_post
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__AgentDatasource'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Agent'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/agents/{agent_id}/datasources/{datasource_id}:
    delete:
      tags:
        - Agent
      summary: Remove Datasource
      description: Remove datasource from agent
      operationId: remove_datasource_api_v1_agents__agent_id__datasources__datasource_id__delete
      parameters:
        - required: true
          schema:
            title: Agent Id
            type: string
          name: agent_id
          in: path
        - required: true
          schema:
            title: Datasource Id
            type: string
          name: datasource_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/llms:
    get:
      tags:
        - LLM
      summary: List
      description: List all LLMs
      operationId: list_api_v1_llms_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMList'
      security:
        - HTTPBearer: []
    post:
      tags:
        - LLM
      summary: Create
      description: Create a new LLM
      operationId: create_api_v1_llms_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__LLM'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__LLM'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/llms/{llm_id}:
    get:
      tags:
        - LLM
      summary: Get
      description: Get a single LLM
      operationId: get_api_v1_llms__llm_id__get
      parameters:
        - required: true
          schema:
            title: Llm Id
            type: string
          name: llm_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__LLM'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    patch:
      tags:
        - LLM
      summary: Update
      description: Patch an LLM
      operationId: update_api_v1_llms__llm_id__patch
      parameters:
        - required: true
          schema:
            title: Llm Id
            type: string
          name: llm_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__LLM'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__LLM'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/api-users:
    post:
      tags:
        - Api user
      summary: Create
      description: Create a new API user
      operationId: create_api_v1_api_users_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__ApiUser'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__ApiUser'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/api-users/me:
    get:
      tags:
        - Api user
      summary: Get
      description: Get a single api user
      operationId: get_api_v1_api_users_me_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__ApiUser'
      security:
        - HTTPBearer: []
    delete:
      tags:
        - Api user
      summary: Delete
      description: Delete an api user
      operationId: delete_api_v1_api_users_me_delete
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - HTTPBearer: []
  /api/v1/api-users/identify:
    post:
      tags:
        - Api user
      summary: Indentify
      description: Indentify an api user
      operationId: indentify_api_v1_api_users_identify_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__ApiUser'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/api-keys:
    get:
      tags:
        - API key
      summary: List
      description: List API keys
      operationId: list_api_v1_api_keys_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyList'
      security:
        - HTTPBearer: []
    post:
      tags:
        - API key
      summary: Create
      description: Create a new API key
      operationId: create_api_v1_api_keys_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__ApiKey'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyCreate'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/api-keys/{id}:
    delete:
      tags:
        - API key
      summary: Delete
      description: Delete an API key
      operationId: delete_api_v1_api_keys__id__delete
      parameters:
        - required: true
          schema:
            title: Id
            type: string
          name: id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__ApiKey'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    patch:
      tags:
        - API key
      summary: Update
      description: Update an API key
      operationId: update_api_v1_api_keys__id__patch
      parameters:
        - required: true
          schema:
            title: Id
            type: string
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__ApiKey'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__ApiKey'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/datasources:
    get:
      tags:
        - Datasource
      summary: List
      description: List all datasources
      operationId: list_api_v1_datasources_get
      parameters:
        - required: false
          schema:
            title: Skip
            type: integer
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            title: Take
            type: integer
            default: 50
          name: take
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasourceList'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    post:
      tags:
        - Datasource
      summary: Create
      description: Create a new datasource
      operationId: create_api_v1_datasources_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__Datasource'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Datasource'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/datasources/{datasource_id}:
    get:
      tags:
        - Datasource
      summary: Get
      description: Get a specific datasource
      operationId: get_api_v1_datasources__datasource_id__get
      parameters:
        - required: true
          schema:
            title: Datasource Id
            type: string
          name: datasource_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Datasource'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    delete:
      tags:
        - Datasource
      summary: Delete
      description: Delete a specific datasource
      operationId: delete_api_v1_datasources__datasource_id__delete
      parameters:
        - required: true
          schema:
            title: Datasource Id
            type: string
          name: datasource_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    patch:
      tags:
        - Datasource
      summary: Update
      description: Update a specific datasource
      operationId: update_api_v1_datasources__datasource_id__patch
      parameters:
        - required: true
          schema:
            title: Datasource Id
            type: string
          name: datasource_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__Datasource'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Datasource'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/tools:
    get:
      tags:
        - Tool
      summary: List
      description: List all tools
      operationId: list_api_v1_tools_get
      parameters:
        - required: false
          schema:
            title: Skip
            type: integer
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            title: Take
            type: integer
            default: 50
          name: take
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolList'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    post:
      tags:
        - Tool
      summary: Create
      description: Create a new tool
      operationId: create_api_v1_tools_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__Tool'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Tool'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/tools/{tool_id}:
    get:
      tags:
        - Tool
      summary: Get
      description: Get a specific tool
      operationId: get_api_v1_tools__tool_id__get
      parameters:
        - required: true
          schema:
            title: Tool Id
            type: string
          name: tool_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Tool'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    delete:
      tags:
        - Tool
      summary: Delete
      description: Delete a specific tool
      operationId: delete_api_v1_tools__tool_id__delete
      parameters:
        - required: true
          schema:
            title: Tool Id
            type: string
          name: tool_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    patch:
      tags:
        - Tool
      summary: Update
      description: Update a specific tool
      operationId: update_api_v1_tools__tool_id__patch
      parameters:
        - required: true
          schema:
            title: Tool Id
            type: string
          name: tool_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Tool'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/workflows:
    get:
      tags:
        - Workflow
      summary: List
      description: List all workflows
      operationId: list_api_v1_workflows_get
      parameters:
        - required: false
          schema:
            title: Skip
            type: integer
            default: 0
          name: skip
          in: query
        - required: false
          schema:
            title: Take
            type: integer
            default: 50
          name: take
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowList'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    post:
      tags:
        - Workflow
      summary: Create
      description: Create a new workflow
      operationId: create_api_v1_workflows_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__Workflow'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Workflow'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/workflows/{workflow_id}:
    get:
      tags:
        - Workflow
      summary: Get
      description: Get a single workflow
      operationId: get_api_v1_workflows__workflow_id__get
      parameters:
        - required: true
          schema:
            title: Workflow Id
            type: string
          name: workflow_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Workflow'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    delete:
      tags:
        - Workflow
      summary: Delete
      description: Delete a specific workflow
      operationId: delete_api_v1_workflows__workflow_id__delete
      parameters:
        - required: true
          schema:
            title: Workflow Id
            type: string
          name: workflow_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    patch:
      tags:
        - Workflow
      summary: Update
      description: Patch a workflow
      operationId: update_api_v1_workflows__workflow_id__patch
      parameters:
        - required: true
          schema:
            title: Workflow Id
            type: string
          name: workflow_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__Workflow'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__Workflow'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/workflows/{workflow_id}/invoke:
    post:
      tags:
        - Workflow
      summary: Invoke
      description: Invoke a specific workflow
      operationId: invoke_api_v1_workflows__workflow_id__invoke_post
      parameters:
        - required: true
          schema:
            title: Workflow Id
            type: string
          name: workflow_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowInvoke'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/workflows/{workflow_id}/steps:
    get:
      tags:
        - Workflow
      summary: List Steps
      description: List all steps of a workflow
      operationId: list_steps_api_v1_workflows__workflow_id__steps_get
      parameters:
        - required: true
          schema:
            title: Workflow Id
            type: string
          name: workflow_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowStepList'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    post:
      tags:
        - Workflow
      summary: Add Step
      description: Create a new workflow step
      operationId: add_step_api_v1_workflows__workflow_id__steps_post
      parameters:
        - required: true
          schema:
            title: Workflow Id
            type: string
          name: workflow_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__WorkflowStep'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__WorkflowStep'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/workflows/{workflow_id}/steps/{step_id}:
    delete:
      tags:
        - Workflow
      summary: Delete Step
      description: Delete a specific workflow step
      operationId: delete_step_api_v1_workflows__workflow_id__steps__step_id__delete
      parameters:
        - required: true
          schema:
            title: Workflow Id
            type: string
          name: workflow_id
          in: path
        - required: true
          schema:
            title: Step Id
            type: string
          name: step_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    patch:
      tags:
        - Workflow
      summary: Update
      description: Patch a workflow step
      operationId: update_api_v1_workflows__workflow_id__steps__step_id__patch
      parameters:
        - required: true
          schema:
            title: Workflow Id
            type: string
          name: workflow_id
          in: path
        - required: true
          schema:
            title: Step Id
            type: string
          name: step_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__WorkflowStep'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__WorkflowStep'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/workflows/config/schema:
    get:
      tags:
        - Workflow Config
      summary: Get Schema
      operationId: get_schema_api_v1_workflows_config_schema_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v1/workflows/{workflow_id}/config:
    post:
      tags:
        - Workflow Config
      summary: Add Config
      operationId: add_config_api_v1_workflows__workflow_id__config_post
      parameters:
        - required: true
          schema:
            title: Workflow Id
            type: string
          name: workflow_id
          in: path
      requestBody:
        content:
          application/x-yaml:
            schema:
              title: Yaml Content
              type: string
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/vector-db:
    post:
      tags:
        - Vector Database
      summary: Create
      description: Create a new Vector Database
      operationId: create_api_v1_vector_db_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__VectorDb'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__VectorDb'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
  /api/v1/vector-dbs:
    get:
      tags:
        - Vector Database
      summary: List
      description: List all Vector Databases
      operationId: list_api_v1_vector_dbs_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDbList'
      security:
        - HTTPBearer: []
  /api/v1/vector-dbs/{vector_db_id}:
    get:
      tags:
        - Vector Database
      summary: Get
      description: Get a single Vector Database
      operationId: get_api_v1_vector_dbs__vector_db_id__get
      parameters:
        - required: true
          schema:
            title: Vector Db Id
            type: string
          name: vector_db_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__VectorDb'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    delete:
      tags:
        - Vector Database
      summary: Delete
      description: Delete a Vector Database
      operationId: delete_api_v1_vector_dbs__vector_db_id__delete
      parameters:
        - required: true
          schema:
            title: Vector Db Id
            type: string
          name: vector_db_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
    patch:
      tags:
        - Vector Database
      summary: Update
      description: Patch a Vector Database
      operationId: update_api_v1_vector_dbs__vector_db_id__patch
      parameters:
        - required: true
          schema:
            title: Vector Db Id
            type: string
          name: vector_db_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__request__VectorDb'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__response__VectorDb'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - HTTPBearer: []
components:
  schemas:
    AgentDatasosurceList:
      title: AgentDatasosurceList
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__AgentDatasource'
    AgentList:
      title: AgentList
      required:
        - success
        - total_pages
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__Agent'
        total_pages:
          title: Total Pages
          type: integer
    AgentToolList:
      title: AgentToolList
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__AgentTool'
    AgentType:
      title: AgentType
      enum:
        - SUPERAGENT
        - OPENAI_ASSISTANT
        - LLM
      type: string
      description: An enumeration.
    AgentUpdate:
      title: AgentUpdate
      type: object
      properties:
        isActive:
          title: Isactive
          type: boolean
        name:
          title: Name
          type: string
        initialMessage:
          title: Initialmessage
          type: string
        prompt:
          title: Prompt
          type: string
        llmModel:
          title: Llmmodel
          type: string
        description:
          title: Description
          type: string
        avatar:
          title: Avatar
          type: string
        type:
          title: Type
          type: string
        metadata:
          title: Metadata
          type: object
        outputSchema:
          title: Outputschema
          type: string
    ApiKeyCreate:
      title: ApiKeyCreate
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/_ApiKeyCreateModel'
    ApiKeyList:
      title: ApiKeyList
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__ApiKey'
    DatasourceList:
      title: DatasourceList
      required:
        - success
        - total_pages
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__Datasource'
        total_pages:
          title: Total Pages
          type: integer
    DatasourceStatus:
      title: DatasourceStatus
      enum:
        - IN_PROGRESS
        - DONE
        - FAILED
      type: string
      description: An enumeration.
    DatasourceType:
      title: DatasourceType
      enum:
        - TXT
        - PDF
        - CSV
        - PPTX
        - XLSX
        - DOCX
        - GOOGLE_DOC
        - YOUTUBE
        - GITHUB_REPOSITORY
        - MARKDOWN
        - WEBPAGE
        - AIRTABLE
        - STRIPE
        - NOTION
        - SITEMAP
        - URL
        - FUNCTION
      type: string
      description: An enumeration.
    EmbeddingsModelProvider:
      title: EmbeddingsModelProvider
      enum:
        - OPENAI
        - AZURE_OPENAI
      type: string
      description: An enumeration.
    FunctionDefinition:
      title: FunctionDefinition
      type: object
      properties:
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        parameters:
          title: Parameters
          type: object
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    LLMList:
      title: LLMList
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__LLM'
    LLMModel:
      title: LLMModel
      enum:
        - GPT_3_5_TURBO
        - GPT_3_5_TURBO_16K_0613
        - GPT_3_5_TURBO_0613
        - GPT_3_5_TURBO_1106
        - GPT_3_5_TURBO_0125
        - GPT_4
        - GPT_4_0613
        - GPT_4_32K
        - GPT_4_32K_0613
        - GPT_4_1106_PREVIEW
        - GPT_4_0125_PREVIEW
        - GPT_4_TURBO
        - GPT_4_TURBO_PREVIEW
        - GPT_4_TURBO_2024_04_09
        - GPT_4_0
        - MISTRAL_7B_INSTRUCT_V01
        - MIXTRAL_8X7B_INSTRUCT_V01
      type: string
      description: An enumeration.
    LLMParams:
      title: LLMParams
      type: object
      properties:
        max_tokens:
          title: Max Tokens
          type: integer
        temperature:
          title: Temperature
          type: number
          default: 0.5
    LLMProvider:
      title: LLMProvider
      enum:
        - OPENAI
        - AZURE_OPENAI
        - HUGGINGFACE
        - PERPLEXITY
        - TOGETHER_AI
        - ANTHROPIC
        - BEDROCK
        - GROQ
        - MISTRAL
        - COHERE_CHAT
      type: string
      description: An enumeration.
    OpenAiAssistantParameters:
      title: OpenAiAssistantParameters
      type: object
      properties:
        metadata:
          title: Metadata
          type: object
        fileIds:
          title: Fileids
          type: array
          items:
            type: string
        tools:
          title: Tools
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/ToolAssistantToolsCode'
              - $ref: '#/components/schemas/ToolAssistantToolsRetrieval'
              - $ref: '#/components/schemas/ToolAssistantToolsFunction'
    ToolAssistantToolsCode:
      title: ToolAssistantToolsCode
      type: object
      properties:
        type:
          title: Type
          enum:
            - code_interpreter
          type: string
    ToolAssistantToolsFunction:
      title: ToolAssistantToolsFunction
      type: object
      properties:
        function:
          $ref: '#/components/schemas/FunctionDefinition'
        type:
          title: Type
          enum:
            - function
          type: string
    ToolAssistantToolsRetrieval:
      title: ToolAssistantToolsRetrieval
      type: object
      properties:
        type:
          title: Type
          enum:
            - retrieval
          type: string
    ToolList:
      title: ToolList
      required:
        - success
        - total_pages
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__Tool'
        total_pages:
          title: Total Pages
          type: integer
    ToolType:
      title: ToolType
      enum:
        - ALGOLIA
        - BROWSER
        - BING_SEARCH
        - REPLICATE
        - WOLFRAM_ALPHA
        - ZAPIER_NLA
        - AGENT
        - OPENAPI
        - CHATGPT_PLUGIN
        - METAPHOR
        - PUBMED
        - CODE_EXECUTOR
        - OPENBB
        - GPT_VISION
        - TTS_1
        - HAND_OFF
        - FUNCTION
        - HTTP
        - SUPERRAG
        - RESEARCH
        - GITHUB
        - SCRAPER
        - ADVANCED_SCRAPER
        - GOOGLE_SEARCH
        - SEC
      type: string
      description: An enumeration.
    ToolUpdate:
      title: ToolUpdate
      type: object
      properties:
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        type:
          title: Type
          type: string
        metadata:
          title: Metadata
          type: object
        returnDirect:
          title: Returndirect
          type: boolean
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
    VectorDbList:
      title: VectorDbList
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__VectorDb'
    VectorDbProvider:
      title: VectorDbProvider
      enum:
        - PINECONE
        - ASTRA_DB
        - WEAVIATE
        - QDRANT
        - SUPABASE
      type: string
      description: An enumeration.
    WorkflowConfig:
      title: WorkflowConfig
      required:
        - id
        - createdAt
        - updatedAt
        - workflowId
      type: object
      properties:
        id:
          title: Id
          type: string
        config:
          title: Config
          type: string
          format: json-string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        workflowId:
          title: Workflowid
          type: string
        workflow:
          $ref: '#/components/schemas/prisma__models__Workflow'
        ApiUser:
          $ref: '#/components/schemas/prisma__models__ApiUser'
        apiUserId:
          title: Apiuserid
          type: string
      description: Represents a WorkflowConfig record
    WorkflowInvoke:
      title: WorkflowInvoke
      required:
        - input
        - enableStreaming
      type: object
      properties:
        input:
          title: Input
          type: string
        enableStreaming:
          title: Enablestreaming
          type: boolean
        sessionId:
          title: Sessionid
          type: string
        outputSchemas:
          title: Outputschemas
          type: object
          additionalProperties:
            type: string
        outputSchema:
          title: Outputschema
          type: string
    WorkflowList:
      title: WorkflowList
      required:
        - success
        - total_pages
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__Workflow'
        total_pages:
          title: Total Pages
          type: integer
    WorkflowStepList:
      title: WorkflowStepList
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__WorkflowStep'
    _ApiKeyCreateModel:
      title: _ApiKeyCreateModel
      required:
        - id
        - name
        - displayApiKey
        - createdAt
        - updatedAt
        - apiUserId
        - apiKey
      type: object
      properties:
        id:
          title: Id
          type: string
        name:
          title: Name
          type: string
        displayApiKey:
          title: Displayapikey
          type: string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        apiUserId:
          title: Apiuserid
          type: string
        apiUser:
          $ref: '#/components/schemas/prisma__models__ApiUser'
        apiKey:
          title: Apikey
          type: string
      description: Represents a ApiKey record
    app__models__request__Agent:
      title: Agent
      required:
        - name
      type: object
      properties:
        isActive:
          title: Isactive
          type: boolean
          default: true
        name:
          title: Name
          type: string
        initialMessage:
          title: Initialmessage
          type: string
        prompt:
          title: Prompt
          type: string
        llmModel:
          title: Llmmodel
          type: string
        llmProvider:
          $ref: '#/components/schemas/LLMProvider'
        description:
          title: Description
          type: string
          default: a helpful agent.
        avatar:
          title: Avatar
          type: string
        type:
          allOf:
            - $ref: '#/components/schemas/AgentType'
          default: SUPERAGENT
        parameters:
          $ref: '#/components/schemas/OpenAiAssistantParameters'
        metadata:
          title: Metadata
          type: object
        outputSchema:
          title: Outputschema
          type: string
    app__models__request__AgentDatasource:
      title: AgentDatasource
      required:
        - datasourceId
      type: object
      properties:
        datasourceId:
          title: Datasourceid
          type: string
    app__models__request__AgentInvoke:
      title: AgentInvoke
      required:
        - input
        - enableStreaming
      type: object
      properties:
        input:
          title: Input
          type: string
        sessionId:
          title: Sessionid
          type: string
        enableStreaming:
          title: Enablestreaming
          type: boolean
        outputSchema:
          title: Outputschema
          type: string
        llm_params:
          $ref: '#/components/schemas/LLMParams'
    app__models__request__AgentLLM:
      title: AgentLLM
      required:
        - llmId
      type: object
      properties:
        llmId:
          title: Llmid
          type: string
    app__models__request__AgentTool:
      title: AgentTool
      required:
        - toolId
      type: object
      properties:
        toolId:
          title: Toolid
          type: string
    app__models__request__ApiKey:
      title: ApiKey
      required:
        - name
      type: object
      properties:
        name:
          title: Name
          type: string
    app__models__request__ApiUser:
      title: ApiUser
      required:
        - email
      type: object
      properties:
        email:
          title: Email
          type: string
        firstName:
          title: Firstname
          type: string
        lastName:
          title: Lastname
          type: string
        company:
          title: Company
          type: string
        anonymousId:
          title: Anonymousid
          type: string
    app__models__request__Datasource:
      title: Datasource
      required:
        - name
        - type
      type: object
      properties:
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        type:
          title: Type
          type: string
        content:
          title: Content
          type: string
        url:
          title: Url
          type: string
        metadata:
          title: Metadata
          type: object
        vectorDbId:
          title: Vectordbid
          type: string
        embeddingsModelProvider:
          allOf:
            - $ref: '#/components/schemas/EmbeddingsModelProvider'
          default: OPENAI
    app__models__request__LLM:
      title: LLM
      required:
        - provider
        - apiKey
      type: object
      properties:
        provider:
          title: Provider
          type: string
        apiKey:
          title: Apikey
          type: string
        options:
          title: Options
          type: object
    app__models__request__Tool:
      title: Tool
      required:
        - name
        - type
      type: object
      properties:
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
          default: a helpful tool.
        type:
          title: Type
          type: string
        metadata:
          title: Metadata
          type: object
        returnDirect:
          title: Returndirect
          type: boolean
          default: false
    app__models__request__VectorDb:
      title: VectorDb
      required:
        - provider
        - options
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/VectorDbProvider'
        options:
          title: Options
          type: object
    app__models__request__Workflow:
      title: Workflow
      required:
        - name
        - description
      type: object
      properties:
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
    app__models__request__WorkflowStep:
      title: WorkflowStep
      required:
        - order
        - agentId
      type: object
      properties:
        order:
          title: Order
          type: integer
        agentId:
          title: Agentid
          type: string
    app__models__response__Agent:
      title: Agent
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/prisma__models__Agent'
    app__models__response__AgentInvoke:
      title: AgentInvoke
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
    app__models__response__ApiKey:
      title: ApiKey
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/prisma__models__ApiKey'
    app__models__response__ApiUser:
      title: ApiUser
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/prisma__models__ApiUser'
    app__models__response__Datasource:
      title: Datasource
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/prisma__models__Datasource'
    app__models__response__LLM:
      title: LLM
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/prisma__models__LLM'
    app__models__response__Tool:
      title: Tool
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/prisma__models__Tool'
    app__models__response__VectorDb:
      title: VectorDb
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/prisma__models__VectorDb'
    app__models__response__Workflow:
      title: Workflow
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/prisma__models__Workflow'
    app__models__response__WorkflowStep:
      title: WorkflowStep
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/prisma__models__WorkflowStep'
    prisma__models__Agent:
      title: Agent
      required:
        - id
        - type
        - name
        - description
        - isActive
        - createdAt
        - updatedAt
        - apiUserId
      type: object
      properties:
        id:
          title: Id
          type: string
        type:
          $ref: '#/components/schemas/AgentType'
        name:
          title: Name
          type: string
        avatar:
          title: Avatar
          type: string
        initialMessage:
          title: Initialmessage
          type: string
        description:
          title: Description
          type: string
        isActive:
          title: Isactive
          type: boolean
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        llms:
          title: Llms
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__AgentLLM'
        llmModel:
          $ref: '#/components/schemas/LLMModel'
        prompt:
          title: Prompt
          type: string
        apiUserId:
          title: Apiuserid
          type: string
        apiUser:
          $ref: '#/components/schemas/prisma__models__ApiUser'
        datasources:
          title: Datasources
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__AgentDatasource'
        tools:
          title: Tools
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__AgentTool'
        workflowSteps:
          title: Workflowsteps
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__WorkflowStep'
        metadata:
          title: Metadata
          type: string
          format: json-string
        outputSchema:
          title: Outputschema
          type: string
      description: Represents a Agent record
    prisma__models__AgentDatasource:
      title: AgentDatasource
      required:
        - agentId
        - datasourceId
        - createdAt
        - updatedAt
      type: object
      properties:
        agentId:
          title: Agentid
          type: string
        datasourceId:
          title: Datasourceid
          type: string
        agent:
          $ref: '#/components/schemas/prisma__models__Agent'
        datasource:
          $ref: '#/components/schemas/prisma__models__Datasource'
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
      description: Represents a AgentDatasource record
    prisma__models__AgentLLM:
      title: AgentLLM
      required:
        - agentId
        - llmId
        - createdAt
        - updatedAt
      type: object
      properties:
        agentId:
          title: Agentid
          type: string
        llmId:
          title: Llmid
          type: string
        agent:
          $ref: '#/components/schemas/prisma__models__Agent'
        llm:
          $ref: '#/components/schemas/prisma__models__LLM'
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
      description: Represents a AgentLLM record
    prisma__models__AgentTool:
      title: AgentTool
      required:
        - agentId
        - toolId
        - createdAt
        - updatedAt
      type: object
      properties:
        agentId:
          title: Agentid
          type: string
        toolId:
          title: Toolid
          type: string
        agent:
          $ref: '#/components/schemas/prisma__models__Agent'
        tool:
          $ref: '#/components/schemas/prisma__models__Tool'
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
      description: Represents a AgentTool record
    prisma__models__ApiKey:
      title: ApiKey
      required:
        - id
        - name
        - displayApiKey
        - createdAt
        - updatedAt
        - apiUserId
      type: object
      properties:
        id:
          title: Id
          type: string
        name:
          title: Name
          type: string
        displayApiKey:
          title: Displayapikey
          type: string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        apiUserId:
          title: Apiuserid
          type: string
        apiUser:
          $ref: '#/components/schemas/prisma__models__ApiUser'
      description: Represents a ApiKey record
    prisma__models__ApiUser:
      title: ApiUser
      required:
        - id
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          title: Id
          type: string
        token:
          title: Token
          type: string
        email:
          title: Email
          type: string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        agents:
          title: Agents
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__Agent'
        llms:
          title: Llms
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__LLM'
        datasources:
          title: Datasources
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__Datasource'
        tools:
          title: Tools
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__Tool'
        workflows:
          title: Workflows
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__Workflow'
        vectorDb:
          title: Vectordb
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__VectorDb'
        workflowConfigs:
          title: Workflowconfigs
          type: array
          items:
            $ref: '#/components/schemas/WorkflowConfig'
        apiKeys:
          title: Apikeys
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__ApiKey'
      description: Represents a ApiUser record
    prisma__models__Datasource:
      title: Datasource
      required:
        - id
        - name
        - type
        - apiUserId
        - createdAt
        - updatedAt
        - status
      type: object
      properties:
        id:
          title: Id
          type: string
        name:
          title: Name
          type: string
        content:
          title: Content
          type: string
        description:
          title: Description
          type: string
        url:
          title: Url
          type: string
        type:
          $ref: '#/components/schemas/DatasourceType'
        apiUserId:
          title: Apiuserid
          type: string
        apiUser:
          $ref: '#/components/schemas/prisma__models__ApiUser'
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        metadata:
          title: Metadata
          type: string
        status:
          $ref: '#/components/schemas/DatasourceStatus'
        datasources:
          title: Datasources
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__AgentDatasource'
        vectorDb:
          $ref: '#/components/schemas/prisma__models__VectorDb'
        vectorDbId:
          title: Vectordbid
          type: string
      description: Represents a Datasource record
    prisma__models__LLM:
      title: LLM
      required:
        - id
        - provider
        - apiKey
        - createdAt
        - updatedAt
        - apiUserId
      type: object
      properties:
        id:
          title: Id
          type: string
        provider:
          $ref: '#/components/schemas/LLMProvider'
        apiKey:
          title: Apikey
          type: string
        options:
          title: Options
          type: string
          format: json-string
        agents:
          title: Agents
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__AgentLLM'
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        apiUserId:
          title: Apiuserid
          type: string
        apiUser:
          $ref: '#/components/schemas/prisma__models__ApiUser'
      description: Represents a LLM record
    prisma__models__Tool:
      title: Tool
      required:
        - id
        - name
        - description
        - type
        - returnDirect
        - createdAt
        - updatedAt
        - apiUserId
      type: object
      properties:
        id:
          title: Id
          type: string
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        type:
          $ref: '#/components/schemas/ToolType'
        returnDirect:
          title: Returndirect
          type: boolean
        metadata:
          title: Metadata
          type: string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        apiUserId:
          title: Apiuserid
          type: string
        apiUser:
          $ref: '#/components/schemas/prisma__models__ApiUser'
        tools:
          title: Tools
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__AgentTool'
        toolConfig:
          title: Toolconfig
          type: string
          format: json-string
      description: Represents a Tool record
    prisma__models__VectorDb:
      title: VectorDb
      required:
        - id
        - provider
        - createdAt
        - updatedAt
        - apiUserId
      type: object
      properties:
        id:
          title: Id
          type: string
        provider:
          $ref: '#/components/schemas/VectorDbProvider'
        options:
          title: Options
          type: string
          format: json-string
        datasources:
          title: Datasources
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__Datasource'
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        apiUserId:
          title: Apiuserid
          type: string
        apiUser:
          $ref: '#/components/schemas/prisma__models__ApiUser'
      description: Represents a VectorDb record
    prisma__models__Workflow:
      title: Workflow
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - apiUserId
      type: object
      properties:
        id:
          title: Id
          type: string
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        steps:
          title: Steps
          type: array
          items:
            $ref: '#/components/schemas/prisma__models__WorkflowStep'
        apiUserId:
          title: Apiuserid
          type: string
        apiUser:
          $ref: '#/components/schemas/prisma__models__ApiUser'
        workflowConfigs:
          title: Workflowconfigs
          type: array
          items:
            $ref: '#/components/schemas/WorkflowConfig'
      description: Represents a Workflow record
    prisma__models__WorkflowStep:
      title: WorkflowStep
      required:
        - id
        - order
        - workflowId
        - createdAt
        - updatedAt
        - agentId
      type: object
      properties:
        id:
          title: Id
          type: string
        order:
          title: Order
          type: integer
        workflowId:
          title: Workflowid
          type: string
        workflow:
          $ref: '#/components/schemas/prisma__models__Workflow'
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        input:
          title: Input
          type: string
        output:
          title: Output
          type: string
        agentId:
          title: Agentid
          type: string
        agent:
          $ref: '#/components/schemas/prisma__models__Agent'
      description: Represents a WorkflowStep record
  securitySchemes:
    HTTPBearer:
      type: http
      scheme: bearer
